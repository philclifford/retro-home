#!/usr/bin/env bash
LC_ALL=C

# Display help usage
function usage () {
  echo
  echo "Usage"
  echo "  $0 --remix <targetdevice> --img ubuntu-21.10-preinstalled-server-armhf+raspi.img"
  echo
  echo "Available supported devices are:"
  echo "  raspi"
  echo "  megapi"
  echo "  nespi"
  echo "  superpi"
}

function nspawn() {
    # Create basic resolv.conf for bind mounting inside the container
    echo "nameserver 1.1.1.1" > "${TMP_DIR}/resolv.conf"

    # Make sure the container has a machine-id
    systemd-machine-id-setup --root "${R}" --print

    # Bind mount resolv.conf and the firmware, set the hostname and spawn
    systemd-nspawn \
      --resolv-conf=off \
      --bind-ro="${TMP_DIR}/resolv.conf":/etc/resolv.conf \
      --bind=${B}:/boot/firmware \
      --hostname="${REMIX}" \
      --machine="${REMIX}" \
      -D "${R}" "${@}"
}

function stage_00_tools() {
    # Required tools on the host
    apt-get -y install binfmt-support debootstrap \
    git qemu-user-static rsync systemd-container \
    ubuntu-keyring whois xz-utils
}

function stage_01_unpack() {
    # Capture the patition details.
    BOOT_PARTITION=$(fdisk -l "${IMG}" | grep "c W95 FAT32 (LBA)")
    ROOT_PARTITION=$(fdisk -l "${IMG}" | grep "83 Linux")
    echo "${BOOT_PARTITION}"
    echo "${ROOT_PARTITION}"

    # Grab the starting sector of the partitions.
    BOOT_START_SECTOR=$(echo "${BOOT_PARTITION}" | sed -e 's/\*//g' | awk '{print $2}')
    ROOT_START_SECTOR=$(echo "${ROOT_PARTITION}" | sed -e 's/\*//g' | awk '{print $2}')

    # Calculate the start byte of the partitions.
    ((BOOT_START_BYTE=BOOT_START_SECTOR * 512))
    ((ROOT_START_BYTE=ROOT_START_SECTOR * 512))

    BOOT_SECTOR_LENGTH=$(echo "${BOOT_PARTITION}" | sed -e 's/\*//g' | awk '{print $4}')
    ROOT_SECTOR_LENGTH=$(echo "${ROOT_PARTITION}" | sed -e 's/\*//g' | awk '{print $4}')

    # Calculate the byte length of the partitions.
    ((BOOT_BYTE_LENGTH=BOOT_SECTOR_LENGTH * 512))
    ((ROOT_BYTE_LENGTH=ROOT_SECTOR_LENGTH * 512))

    mkdir -p "${TMP_DIR}"/{boot,root}
    mkdir -p "${B}"
    mkdir -p "${R}"
    # Mount the partitions to the mount points.
    mount -v -o offset=${BOOT_START_BYTE},sizelimit=${BOOT_BYTE_LENGTH} -t vfat "${IMG}" "${TMP_DIR}/boot"
    mount -v -o offset=${ROOT_START_BYTE},sizelimit=${ROOT_BYTE_LENGTH} -t ext4 "${IMG}" "${TMP_DIR}/root"
    BOOT_DEV=$(echo "${BOOT_MOUNT}" | cut -d' ' -f2)
    ROOT_DEV=$(echo "${ROOT_MOUNT}" | cut -d' ' -f2)
    rsync -aHAXx --delete "${TMP_DIR}/boot/" "${B}/"
    rsync -aHAXx --delete "${TMP_DIR}/root/" "${R}/"
    umount -l "${TMP_DIR}/boot"
    umount -l "${TMP_DIR}/root"
    rm -rf "${TMP_DIR}/boot"
    rm -rf "${TMP_DIR}/root"
}

function stage_02_apt_prepare() {
    # Remove most of the server components
    nspawn apt -y purge --autoremove bcache-tools btrfs-progs byobu \
    cloud-initramfs-copymods cloud-initramfs-dyn-netconf curl eatmydata \
    ethtool finalrd htop landscape-common lvm2 lxd-agent-loader mdadm \
    multipath-tools open-iscsi overlayroot screen sosreport tmux vim \
    xfsprogs

    nspawn apt -y update
    nspawn apt -y dist-upgrade
}

function stage_03_apt_install() {
    nspawn apt -y install pi-bluetooth xserver-xorg
    nspawn apt -y install --no-install-recommends lightdm slick-greeter
    nspawn apt -y install connman connman-gtk connman-ui
    rm -rf ${R}/opt/ludo
    local LUDO_VER="0.16.9"
    wget -c https://github.com/libretro/ludo/releases/download/v${LUDO_VER}/Ludo-Linux-arm-${LUDO_VER}.tar.gz -O ${R}/opt/Ludo-Linux-arm-${LUDO_VER}.tar.gz
    nspawn bash -c "cd /opt && tar zxvf Ludo-Linux-arm-${LUDO_VER}.tar.gz"
    nspawn mv /opt/Ludo-Linux-arm-${LUDO_VER} /opt/ludo
    nspawn chown -R root: /opt/ludo
}

function stage_04_snap() {
    # Remove existing seeded snaps.
    rm -v "${R}"/etc/systemd/system/snap-*.mount
    rm -v "${R}"/etc/systemd/system/snap.lxd.*
    rm -v "${R}"/etc/systemd/system/multi-user.target.wants/snap-*.mount
    rm -rfv "${R}"/snap/*
    rm -rfv "${R}"/var/lib/snapd/seed/*
    rm -fv "${R}"/var/lib/snapd/snaps/*.snap
    rm -fv "${R}"/var/lib/snapd/state.json
    rm -fv "${R}"/var/lib/snapd/system-key
}

function stage_05_config() {
    rm ${B}/network-config

    # Disable cloud-init from managing the network
    echo "network: {config: disabled}" > ${R}/etc/cloud/cloud.cfg.d/99-disable-network-config.cfg

    cat <<'EOM' > ${R}/etc/cloud/cloud.cfg
# The top level settings are used as module
# and system configuration.

# A set of users which may be applied and/or used by various modules
# when a 'default' entry is found it will reference the 'default_user'
# from the distro configuration specified below
users:
   - default

# If this is set, 'root' will not be able to ssh in and they
# will get a message to login instead as the default $user
disable_root: true

# This will cause the set+update hostname module to not operate (if true)
preserve_hostname: false

# The modules that run in the 'init' stage
cloud_init_modules:
 - seed_random
 - bootcmd
 - write-files
 - growpart
 - resizefs
 - mounts
 - set_hostname
 - update_hostname
 - update_etc_hosts
 - ca-certs
 - rsyslog
 - users-groups
 - ssh

# The modules that run in the 'config' stage
cloud_config_modules:
# Emit the cloud config ready event
# this can be used by upstart jobs for 'start on cloud-config'.
 - emit_upstart
 - ssh-import-id
 - locale
 - set-passwords
 - grub-dpkg
 - apt-pipelining
 - apt-configure
 - ntp
 - timezone
 - runcmd

# The modules that run in the 'final' stage
cloud_final_modules:
 - scripts-vendor
 - scripts-per-once
 - scripts-per-boot
 - scripts-per-instance
 - scripts-user
 - ssh-authkey-fingerprints
 - final-message

# System and/or distro specific settings
# (not accessible to handlers/transforms)
system_info:
   # This will affect which distro class gets used
   distro: ubuntu
   # Default user name + that default users groups (if added/used)
   default_user:
     name: ubuntu
     lock_passwd: True
     gecos: Ubuntu
     groups: [adm, audio, cdrom, dialout, dip, floppy, netdev, plugdev, sudo, video]
     sudo: ["ALL=(ALL) NOPASSWD:ALL"]
     shell: /bin/bash
   network:
     renderers: ['netplan', 'eni', 'sysconfig']
   # Automatically discover the best ntp_client
   ntp_client: auto
   # Other config here will be given to the distro class and/or path classes
   paths:
      cloud_dir: /var/lib/cloud/
      templates_dir: /etc/cloud/templates/
      upstart_dir: /etc/init/
   ssh_svcname: ssh
EOM

    # Update the icon cache
    nspawn apt -y install gtk-update-icon-cache libglib2.0-bin

#     # Create gschema override to set GruvBox as the system default theme
#     cat <<'EOM' > "${R}/usr/share/glib-2.0/schemas/90_ubuntu-retro-remix.gschema.override"
# [x.dm.slick-greeter]
# background=''
# background-color='#393939'
# draw-grid=true
# draw-user-backgrounds=false
# enable-hidpi='auto'
# font-name='Inter 11'
# icon-theme-name='gruvbox-dark-icons-gtk'
# high-contrast=false
# show-hostname=true
# logo='/usr/share/libretro/assets/ozone/png/retroarch.png'
# onscreen-keyboard=false
# #other-monitors-logo=Logo file to use for other monitors
# play-ready-sound='/usr/share/libretro/assets/sounds/launch.ogg'
# screen-reader=false
# show-power=true
# show-a11y=true
# show-keyboard=true
# show-clock=true
# show-quit=true
# theme-name='gruvbox-dark-gtk'
# xft-antialias=true
# xft-dpi=96
# xft-hintstyle='hintslight'
# xft-rgba='rgb'

# [org.gnome.desktop.interface]
# gtk-theme='gruvbox-dark-gtk'
# icon-theme='gruvbox-dark-icons-gtk'
# EOM
#     nspawn glib-compile-schemas /usr/share/glib-2.0/schemas/

    # Create xsession entry for "retroremix"
    mkdir -p ${R}/usr/share/xsessions

    cat <<'EOM' > ${R}/usr/share/xsessions/ludo.desktop
[Desktop Entry]
Name=Ludo
Exec=/opt/ludo/ludo --ludos
TryExec=/opt/ludo/ludo --ludos
Icon=/opt/ludo/assets/icon.svg
Type=Application
EOM

    # Enable auto-login for lightdm. ubuntu user autologin to the session
    cat <<'EOM' > ${R}/etc/lightdm/lightdm.conf
[SeatDefaults]
autologin-user=ubuntu
autologin-user-timeout=0
autologin-session=ludo
EOM

    cat <<EOM > "${B}/README"
An overview of the files on the /boot/firmware partition (the 1st partition
on the SD card) used by the Ubuntu boot process (roughly in order) is as
follows:

* bootcode.bin   - this is the second stage bootloader loaded by all pis with
                   the exception of the pi4 (where this is replaced by flash
                   memory)
* config.txt     - the configuration file read by the boot process
* start*.elf     - the third stage bootloader, which handles device-tree
                   modification and which loads...
* vmlinuz        - the Linux kernel
* cmdline.txt    - the Linux kernel command line
* initrd.img     - the initramfs
EOM

    cat <<EOM > "${B}/config.txt"
[pi4]
max_framebuffers=2

[all]
kernel=vmlinuz
cmdline=cmdline.txt
initramfs initrd.img followkernel

# Enable the audio output, I2C and SPI interfaces on the GPIO header
dtparam=audio=on
dtparam=i2c_arm=on
dtparam=spi=on

# Enable the full KMS graphics overlay, as recommended by Ludo
dtoverlay=vc4-kms-v3d
gpu_mem=128
start_x=1

# Comment out the following line if the edges of the desktop appear outside
# the edges of your display
disable_overscan=1

# If you have issues with audio, you may try uncommenting the following line
# which forces the HDMI output into HDMI mode instead of DVI (which doesn't
# support audio output)
hdmi_drive=2

# If you have a CM4, uncomment the following line to enable the USB2 outputs
# on the IO board (assuming your CM4 is plugged into such a board)
#dtoverlay=dwc2,dr_mode=host
EOM

    echo "net.ifnames=0 dwc_otg.lpm_enable=0 console=tty1 root=LABEL=writable rootfstype=ext4 elevator=deadline rootwait fixrtc quiet splash" > "${B}/cmdline.txt"
}

function stage_06_clean() {
    nspawn apt-get -y update
    nspawn apt-get -y upgrade
    nspawn apt-get -y dist-upgrade
    nspawn apt-get -y autoremove
    nspawn apt-get -y autoclean
    nspawn apt-get -y clean

    # Remove old kernel
    local OLD_KERNEL=$(ls -1 ${R}/lib/modules/ | head -n1)
    local OLD_KERNEL_SHORT=$(echo "${OLD_KERNEL}" | sed s'/-raspi//')
    local NEW_KERNEL=$(ls -1 ${R}/boot/vmlinuz-* | tail -n1 | awk -F/ '{print $NF}' | cut -d'-' -f2-4)
    echo "Old: ${OLD_KERNEL} (${OLD_KERNEL_SHORT})"
    echo "New: ${NEW_KERNEL}"
    if [ "${OLD_KERNEL}" == "${NEW_KERNEL}" ]; then
        echo "No old kernel to remove."
    else
        nspawn apt -y remove "linux-image-${OLD_KERNEL}" "linux-modules-${OLD_KERNEL}" "linux-raspi-headers-${OLD_KERNEL_SHORT}"
        # linux-modules-extra-raspi was introduce in 21.10 (Impish)
        case ${REL_VER} in
            21.10) nspawn apt -y remove "linux-modules-extra-${OLD_KERNEL}";;
        esac
    fi

    # Copy new devicetree, overlays and kernel to /boot/firmware
    cp "${R}/lib/firmware/${NEW_KERNEL}/device-tree/*.dtb" "${B}/"
    cp "${R}/lib/firmware/${NEW_KERNEL}/device-tree/broadcom/*.dtb" "${B}"/
    cp "${R}/lib/firmware/${NEW_KERNEL}/device-tree/overlays/*" "${B}"/overlays/
    cp -av "${R}/boot/vmlinuz-${NEW_KERNEL}" "${B}/vmlinuz"
    cp -av "${R}/boot/initrd.img-${NEW_KERNEL}" "${B}/initrd.img"

    rm -f "${B}"/meta-data
    rm -f "${B}"/network-config
    rm -f "${B}"/user-data
    rm -f "${B}"/{*.bak,*.old}
    rm -f "${R}"/boot/{*.bak,*.old}
    rm -f "${R}"/etc/ssh/ssh_host_*_key*
    rm -f "${R}"/etc/apt/*.save
    rm -f "${R}"/etc/apt/sources.list.d/*.save
    rm -f "${R}"/var/log/apt/*
    rm -f "${R}"/var/log/alternatives.log
    rm -f "${R}"/var/log/dpkg.log
    rm -f "${R}"/var/log/fontconfig.log
    rm -rf "${R}"/tmp/*
    rm -f "${R}"/var/crash/*
    rm -f "${R}"/var/cache/debconf/*-old
    rm -f "${R}"/var/lib/dpkg/*-old
    [ -L "${R}"/var/lib/dbus/machine-id ] || rm -f "${R}"/var/lib/dbus/machine-id
    echo '' > "${R}"/etc/machine-id
}

function stage_07_image() {
    # Build the image file
    local SIZE_IMG=$(du -csh "${R}" | tail -n1 | cut -d'.' -f1)
    ((SIZE_IMG+=2))
    local SIZE_BOOT="256MiB"

    # Remove old images.
    rm -fv "${TMP_DIR}/${IMG_OUT}"

    # Create an empty file file.
    dd if=/dev/zero of="${TMP_DIR}/${IMG_OUT}" bs=1MB count=1
    dd if=/dev/zero of="${TMP_DIR}/${IMG_OUT}" bs=1MB count=0 seek=$(( SIZE_IMG * 1000 ))

    # Initialising: msdos
    parted -s "${TMP_DIR}/${IMG_OUT}" mktable msdos
    echo "Creating /boot/firmware partition"
    parted -a optimal -s "${TMP_DIR}/${IMG_OUT}" mkpart primary fat32 1 "${SIZE_BOOT}"
    echo "Creating / partition"
    parted -a optimal -s "${TMP_DIR}/${IMG_OUT}" mkpart primary ext4 "${SIZE_BOOT}" 100%
    echo "Making partition 1 bootable"
    parted -s "${TMP_DIR}/${IMG_OUT}" set 1 boot on

    PARTED_OUT=$(parted -s "${TMP_DIR}/${IMG_OUT}" unit b print)
    BOOT_OFFSET=$(echo "${PARTED_OUT}" | grep -e '^ 1'| xargs echo -n \
    | cut -d" " -f 2 | tr -d B)
    BOOT_LENGTH=$(echo "${PARTED_OUT}" | grep -e '^ 1'| xargs echo -n \
    | cut -d" " -f 4 | tr -d B)

    ROOT_OFFSET=$(echo "${PARTED_OUT}" | grep -e '^ 2'| xargs echo -n \
    | cut -d" " -f 2 | tr -d B)
    ROOT_LENGTH=$(echo "${PARTED_OUT}" | grep -e '^ 2'| xargs echo -n \
    | cut -d" " -f 4 | tr -d B)

    BOOT_LOOP=$(losetup --show -f -o "${BOOT_OFFSET}" --sizelimit "${BOOT_LENGTH}" "${TMP_DIR}/${IMG_OUT}")
    ROOT_LOOP=$(losetup --show -f -o "${ROOT_OFFSET}" --sizelimit "${ROOT_LENGTH}" "${TMP_DIR}/${IMG_OUT}")
    echo "/boot/firmware: offset ${BOOT_OFFSET}, length ${BOOT_LENGTH}"
    echo "/:              offset ${ROOT_OFFSET}, length ${ROOT_LENGTH}"

    mkfs.vfat -n system-boot -S 512 -s 16 -v "${BOOT_LOOP}"
    mkfs.ext4 -L writable -m 0 "${ROOT_LOOP}"

    MOUNTDIR="${TMP_DIR}/image"
    mkdir -p "${MOUNTDIR}"
    mount -v "${ROOT_LOOP}" "${MOUNTDIR}" -t ext4
    mkdir -p "${MOUNTDIR}/boot/firmware"
    mount -v "${BOOT_LOOP}" "${MOUNTDIR}/boot/firmware" -t vfat
    echo "Syncing root..."
    rsync -aHAXx --delete "${R}"/ "${MOUNTDIR}/"
    echo "Syncing boot..."
    rsync -aHAXx --delete "${B}"/ "${MOUNTDIR}/boot/firmware/"
    date +"%Y%m%d" > "${MOUNTDIR}/.disk/info"
    sync
    umount -l "${MOUNTDIR}/boot/firmware"
    umount -l "${MOUNTDIR}"
    losetup -d "${ROOT_LOOP}"
    losetup -d "${BOOT_LOOP}"
    ls -lh "${TMP_DIR}/${IMG_OUT}"
    rm -rf "${MOUNTDIR}"

    # NOTE! Disabled while iterating
    echo "Compressing ${IMG_OUT}.xz"
    rm "${TMP_DIR}/${IMG_OUT}.xz" 2>/dev/null
    xz --keep -T 0 "${TMP_DIR}/${IMG_OUT}"
    ls -lh "${TMP_DIR}/${IMG_OUT}.xz"
}

function stage_08_hash() {
    local HASH="sha256"
    local OUT_HASH="${TMP_DIR}/${IMG_OUT}.xz.${HASH}"

    rm -f "${OUT_HASH}"

    if [ -e "${TMP_DIR}/${IMG_OUT}.xz" ]; then
        echo "Hashing ${IMG_OUT}.xz"
        ${HASH}sum "${TMP_DIR}/${IMG_OUT}.xz" > "${OUT_HASH}"
        sed -i -r "s/ .*\/(.+)/  \1/g" "${OUT_HASH}"
    else
        echo "WARNING! Didn't find ${TMP_DIR}/${IMG_OUT} to hash."
    fi
}

if [ "$(id -u)" -ne 0 ]; then
    echo "ERROR! Root permissions required."
    exit 1
fi

# Take command line arguments
if [ $# -lt 1 ]; then
    usage
    exit 0
else
    while [ $# -gt 0 ]; do
        case "${1}" in
            -remix|--remix)
                REMIX="${2}"
                shift
                shift;;
            -img|--img)
                IMG="${2}"
                if [ ! -e "${IMG}" ]; then
                    echo "[!] ERROR: ${IMG} was not found."
                    exit 1
                fi
                shift
                shift;;
            *)
                echo "[!] ERROR: \"${1}\" is not a supported parameter."
                usage
                exit 1;;
        esac
    done
fi

# Set variables based on chosen desktop environment
case "${REMIX}" in
    raspi)
        echo "[+] Specified Raspi"
        shift;;
    nespi)
        echo "[+] Specified NESPi"
        shift;;
    superpi)
        echo "[+] Specified SUPERPi"
        shift;;
    megapi)
        echo "[+] Specified MEGA Pi"
        shift;;
    *)
        if [ -z "${REMIX}" ]; then
        echo "[!] ERROR: Please specifiy an retro remix"
        else
        echo "[!] ERROR: ${REMIX} is not a valid retro remix"
        fi
        usage
        exit 1;;
esac

TMP_DIR=$(pwd)
IMG_QUALITY="-alpha1"
IMG_VER=$(echo "${IMG}" | cut -d'-' -f2)
IMG_ARCH=$(echo "${IMG}" | cut -d'+' -f1 | cut -d'-' -f5)
IMG_OUT=$(echo "${IMG}" | sed "s/ubuntu-/ubuntu-retro-${REMIX}-remix-/" | sed "s/preinstalled-server-//" | sed "s/${IMG_VER}/${IMG_VER}${IMG_QUALITY}/" | sed "s/\+raspi//")
IMG_TEST=$(file -b "${IMG}" | cut -d';' -f1)
B="${TMP_DIR}/${IMG_ARCH}/${REMIX}/boot"
R="${TMP_DIR}/${IMG_ARCH}/${REMIX}/root"

if [ "${IMG_TEST}" == "DOS/MBR boot sector" ]; then
    stage_00_tools
    stage_01_unpack
    stage_02_apt_prepare
    stage_03_apt_install
    stage_04_snap
    stage_05_config
    stage_06_clean
    stage_07_image
    stage_08_hash
else
    echo "[!] ERROR: ${IMG} is not a valid disk image."
    if [ "${IMG_TEST}" == "XZ compressed data" ]; then
        echo "           Try decompressing ${IMG} first using:"
        echo "           unxz --decompress --keep ${IMG}"
    fi
    exit 1
fi
