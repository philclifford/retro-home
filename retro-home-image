#!/usr/bin/env bash
LC_ALL=C

# TODO
# - Add Plymouth splash
# - Add 'ludo' user authentication for Samba
# - Add Ludo icon to .faces
# - Add a custom panel layout?
# - Add Vivaldi browser?
# - Add Joystick as mouse
# - Add N64 core
# - Integrate LudOS session with desktop session
# - Disable GNOME suspend
# - Disable Tracker; via systemd unit
# - Disable TeXinfo icon

# Display help usage
function usage () {
  echo
  echo "Usage"
  echo "  $0 --device <targetdevice>"
  echo
  echo "Supported (or planned) devices are:"
  echo "  raspi:            Rasberry Pi 2, 3 and 4"
  echo "  gamehat:          Waveshare Game HAT"
  echo "  gpi:              RetroFlag GPi Case"
  echo "  gpimate:          RetroFlag GPi Case with GPiMate for CM3+Lite"
  echo "  gpimateplus:      RetroFlag GPi Case with GPiMate Plus for CM4 Lite"
  echo "  nespi:            RetroFlag NESPi Case+"
  echo "  megapi:           RetroFlag MEGAPi Case"
  echo "  monster:          Monster Arcade Controller Kit"
  echo "  picade:           Pimoroni Picade"
  echo "  picadeconsole:    Pimoroni Picade Console"
  echo "  superpi:          RetroFlag SUPERPi Case"
}

function not_implemented() {
    echo "[!] Hardware support for ${REMIX} is not yet implemented, but is planned."
    exit 1
}

function sync_from() {
    if [ -z "${1}" ] || [ -z "${2}" ]; then
        echo "ERROR! Source stages to sync were not passed."
        exit 1
    fi

    local B_SOURCE="${1}"
    local R_SOURCE="${2}"

    if [ -d "${B}" ] && [ -d "${R}" ]; then
        echo "Syncing from ${B_SOURCE}..."
        rsync -aHAXx --delete "${B_SOURCE}/" "${B}/"
        echo "Syncing from ${R_SOURCE}..."
        rsync -aHAXx --delete "${R_SOURCE}/" "${R}/"
    else
        echo "ERROR! Either ${B} or ${R} do not exist!"
        exit 1
    fi
}

function nspawn() {
    # Create basic resolv.conf for bind mounting inside the container
    echo "nameserver 1.1.1.1" > "${R_STAGE_0}/resolv.conf"

    if pidof apt-cacher-ng && [ -d "${R}/etc/apt/apt.conf.d" ]; then
        echo "Acquire::http { Proxy \"http://${APT_CACHE_IP}:3142\"; }" > "${R}/etc/apt/apt.conf.d/90cache"
    fi

    # Make sure the container has a machine-id
    systemd-machine-id-setup --root "${R}" --print

    # Bind mount resolv.conf and the firmware, set the hostname and spawn
    systemd-nspawn \
      --resolv-conf=off \
      --bind-ro="${R_STAGE_0}/resolv.conf":/etc/resolv.conf \
      --bind="${B}":/boot/firmware \
      --machine="retro-home-${REMIX}" \
      --directory "${R}" "${@}"

    if [ -e "${R}/etc/apt/apt.conf.d/90cache" ]; then
        rm -f "${R}/etc/apt/apt.conf.d/90cache"
    fi
}

function stage_01_bootstrap() {
    local REPO=""
    export B="${B_STAGE_1}"
    export R="${R_STAGE_1}"

    rm -rf "${B_STAGE_1}"/*
    rm -rf "${R_STAGE_1}"/*

    # Required tools on the host
    apt-get -y install binfmt-support debootstrap git qemu-user-static rsync \
    systemd-container ubuntu-keyring whois xz-utils

    # Bootstrap a minimal Ubuntu
    #   --variant=minbase; if I ever need to go smaller
    #   Include cloud-guest-utils; prevents cloud-image-utils, and therefore qemu-system-x86, being installed later
    #   netplan.io is excluded; Ludo uses connman

    if pidof apt-cacher-ng; then
        REPO="http://localhost:3142/ports.ubuntu.com/"
    else
        REPO="http://ports.ubuntu.com/"
    fi

    debootstrap \
        --arch="${IMG_ARCH}" \
        --cache-dir="${R_STAGE_0}" \
        --components=main,restricted,universe,multiverse \
        --exclude=netplan.io,ubuntu-minimal \
        --foreign \
        --include=cloud-guest-utils \
        "${IMG_RELEASE}" "${R}" "${REPO}"
    nspawn /debootstrap/debootstrap \
        --second-stage

    cat <<EOM >"${R}/etc/apt/sources.list"
deb http://ports.ubuntu.com/ ${IMG_RELEASE} main restricted universe multiverse
deb-src http://ports.ubuntu.com/ ${IMG_RELEASE} main restricted universe multiverse

deb http://ports.ubuntu.com/ ${IMG_RELEASE}-updates main restricted universe multiverse
deb-src http://ports.ubuntu.com/ ${IMG_RELEASE}-updates main restricted universe multiverse

deb http://ports.ubuntu.com/ ${IMG_RELEASE}-security main restricted universe multiverse
deb-src http://ports.ubuntu.com/ ${IMG_RELEASE}-security main restricted universe multiverse

deb http://ports.ubuntu.com/ ${IMG_RELEASE}-backports main restricted universe multiverse
deb-src http://ports.ubuntu.com/ ${IMG_RELEASE}-backports main restricted universe multiverse
EOM

    nspawn hostnamectl --static set-hostname "retro-home-${REMIX}"
    echo "retro-home-${REMIX}" > "${R}/etc/hostname"
    sed -i "1s|.*|127.0.0.1\tlocalhost retro-home-${REMIX}|" "${R}/etc/hosts"

    nspawn apt-get -y update

    # Install Multicast DNS Service Discovery and first boot filesystem expansion
    nspawn apt-get -y install avahi-daemon cloud-initramfs-growroot

    nspawn apt-get -y upgrade
    nspawn apt-get -y dist-upgrade

    # Add standard Ubuntu userspace
    if [ "${SKIP_UBUNTU_STANDARD}" -eq 0 ]; then
        nspawn apt-get -y install standard^
    fi

    nspawn apt-get -y autoclean
    nspawn apt-get -y clean
}

function stage_02_ludo() {
    export B="${B_STAGE_2}"
    export R="${R_STAGE_2}"
    sync_from "${B_STAGE_1}" "${R_STAGE_1}"

    if [ "${SKIP_LUDO}" -eq 0 ]; then
        # X11 et all
        nspawn apt-get -y install libgles1 libgles2 libglfw3 libosmesa6 \
        libxvmc1 x11-xserver-utils x11-utils xserver-xorg

        # Install xdg-utils now, but prevent perl proliferation
        nspawn apt-get -y install --no-install-recommends xdg-utils

        # LudOS requirements
        nspawn apt-get -y install bluez connman feh ssh
        nspawn apt-get -y install --no-install-recommends samba

        local LUDO_VER="0.16.10"
        wget -qc "https://github.com/libretro/ludo/releases/download/v${LUDO_VER}/ludo_${LUDO_VER}-1_armhf.deb" -O "${R_STAGE_0}/ludo.deb"
        cp "${R_STAGE_0}/ludo.deb" "${R}/ludo.deb"
        nspawn apt-get -y install /ludo.deb
        rm -f "${R}/ludo.deb"

        # Display manager
        nspawn apt-get -y install --no-install-recommends lightdm slick-greeter
    fi
}

function stage_03_micro_desktop() {
    export B="${B_STAGE_3}"
    export R="${R_STAGE_3}"
    sync_from "${B_STAGE_2}" "${R_STAGE_2}"

    if [ "${SKIP_DESKTOP}" -eq 0 ]; then
        # mutter-common provides gschema that prevents g-c-c from crashing
        nspawn apt-get -y install --no-install-recommends connman-gtk \
        dconf-editor gedit gnome-session-flashback gnome-control-center \
        file-roller fonts-mplus indicator-applet indicator-application \
        indicator-session librsvg2-2 librsvg2-bin librsvg2-common \
        mutter-common pulseaudio sakura transmission-gtk \
        yaru-theme-gtk yaru-theme-icon yaru-theme-sound

        #wget -qc "https://downloads.vivaldi.com/stable/vivaldi-stable_4.3.2439.71-1_${IMG_ARCH}.deb" -O "${R_STAGE_0}/vivaldi-stable.deb"
        #cp "${R_STAGE_0}/vivaldi-stable.deb" "${R}/vivaldi-stable.deb"
        #nspawn apt-get -y install /vivaldi-stable.deb
        #rm -f "${R}/vivaldi-stable.deb"

        # # https://gist.github.com/ruario/19a28d98d29d34ec9b184c42e5f8bf29
        # if [ -e "widevine-flash-20211119_${IMG_ARCH}.tgz" ]; then
        #     tar Cfx "${R}/" widevine-flash-20211119_armhf.tgz
        #     mkdir -p "${R}/etc/skel/.config/vivaldi/WidevineCdm"
        #     echo '{"Path":"/opt/WidevineCdm"}' > "${R}/etc/skel/.config/vivaldi/WidevineCdm/latest-component-updated-widevine-cdm"
        # fi
    fi
}

function stage_04_kernel() {
    export B="${B_STAGE_4}"
    export R="${R_STAGE_4}"
    sync_from "${B_STAGE_3}" "${R_STAGE_3}"

    cat <<'EOM' > "${B}/README"
An overview of the files on the /boot/firmware partition (the 1st partition
on the SD card) used by the Ubuntu boot process (roughly in order) is as
follows:

* bootcode.bin   - this is the second stage bootloader loaded by all pis with
                   the exception of the pi4 (where this is replaced by flash
                   memory)
* config.txt     - the configuration file read by the boot process
* start*.elf     - the third stage bootloader, which handles device-tree
                   modification and which loads...
* vmlinuz        - the Linux kernel
* cmdline.txt    - the Linux kernel command line
* initrd.img     - the initramfs
EOM

    # No uboot since 20.10
    if [ "${IMG_ARCH}"  == "arm64" ]; then
        ARM64="arm_64bit=1"
    else
        ARM64=""
    fi

    cat <<EOM > "${B}/config.txt"
[pi4]
max_framebuffers=2

[all]
${ARM64}
kernel=vmlinuz
cmdline=cmdline.txt
initramfs initrd.img followkernel

# Enable the audio output, I2C and SPI interfaces on the GPIO header
dtparam=audio=on
dtparam=i2c_arm=on
dtparam=spi=on

# Enable the full KMS graphics overlay, as recommended by Ludo
dtoverlay=vc4-fkms-v3d
gpu_mem=128
start_x=1

# Comment out the following line if the edges of the desktop appear outside
# the edges of your display
disable_overscan=1

# If you have issues with audio, you may try uncommenting the following line
# which forces the HDMI output into HDMI mode instead of DVI (which doesn't
# support audio output)
hdmi_drive=2

# If you have a CM4, uncomment the following line to enable the USB2 outputs
# on the IO board (assuming your CM4 is plugged into such a board)
#dtoverlay=dwc2,dr_mode=host
EOM

    echo "net.ifnames=0 dwc_otg.lpm_enable=0 console=tty1 root=LABEL=writable rootfstype=ext4 elevator=deadline rootwait fixrtc consoleblank=0 vt.global_cursor_default=0 quiet splash" > "${B}/cmdline.txt"

    cat <<'EOM' > "${R}/etc/fstab"
LABEL=writable      /               ext4    defaults,noatime,x-systemd.growfs   0   0
LABEL=system-boot   /boot/firmware  vfat    defaults                            0   1
EOM

    nspawn apt-get -y install libraspberrypi0 libraspberrypi-bin \
    linux-firmware-raspi2 linux-headers-raspi linux-image-raspi \
    linux-modules-extra-raspi pi-bluetooth raspi-config rpi-eeprom

    local NEW_KERNEL=$(ls -1 "${R}"/boot/vmlinuz-* | tail -n1 | awk -F/ '{print $NF}' | cut -d'-' -f2-4)
    if [ -z "${NEW_KERNEL}" ]; then
        echo "ERROR! Could not detect the new kernel version"
        exit 1
    fi
    echo "Kernel: ${NEW_KERNEL}"

    # Copy firmware, devicetree, overlays and kernel to the boot file system
    cp -v "${R}/lib/linux-firmware-raspi2/"* "${B}/"
    cp -av "${R}/lib/firmware/${NEW_KERNEL}/device-tree/"* "${B}/"

    # Move the arm64 device-tree
    if [ -d "${B}/broadcom" ]; then
        mv -v "${B}/broadcom/"*.dtb "${B}"/
        rm -rf "${B}/broadcom"
    fi

    cp -av "${R}/boot/vmlinuz-${NEW_KERNEL}" "${B}/vmlinuz"
    cp -av "${R}/boot/initrd.img-${NEW_KERNEL}" "${B}/initrd.img"
}

function stage_05_config() {
    export B="${B_STAGE_5}"
    export R="${R_STAGE_5}"
    sync_from "${B_STAGE_4}" "${R_STAGE_4}"

    # Create user and groups
    local DATE=""
    DATE=$(date +%m%H%M%S)
    local PASSWD=""
    PASSWD=$(mkpasswd -m sha-512 retro "${DATE}")
    nspawn addgroup --gid 1000 ludo

    # Create Raspberry Pi specific groups.
    nspawn groupadd -f --system gpio
    nspawn groupadd -f --system i2c
    nspawn groupadd -f --system input
    nspawn groupadd -f --system spi

    cat <<'EOM' > "${R}/usr/local/sbin/adduser.local"
#!/bin/sh
# This script is executed as the final step when calling `adduser`
# USAGE:
#   adduser.local USER UID GID HOME

# Add user to the Raspberry Pi specific groups
usermod -a -G adm,gpio,i2c,input,spi,video $1
EOM
    chmod 755 "${R}/usr/local/sbin/adduser.local"

    nspawn adduser --gecos Ludo --add_extra_groups --disabled-password --home /storage --gid 1000 --uid 1000 ludo
    nspawn usermod -a -G adm,sudo -p "${PASSWD}" ludo

    # Disable Ubuntu Advantage Tools; not required
    nspawn systemctl disable ua-reboot-cmds.service
    nspawn systemctl disable ua-timer.timer
    nspawn systemctl disable ua-license-check.path

    # Disable apport
    sed -i 's|enabled=1|enabled=0|' "${R}/etc/default/apport"

    # Supress kernel messages
    # - https://superuser.com/questions/351387/how-to-stop-kernel-messages-from-flooding-my-console
    echo "kernel.printk = 1 4 1 7" > "${R}/etc/sysctl.d/20-printk.conf"

    # Regenerate ssh host keys on first boot
    if  [ -d "${R}/etc/ssh" ]; then
        cat <<'EOM' > "${R}/usr/lib/systemd/system/ssh-regenerate-hostkeys.service"
[Unit]
Description=Regenerate SSH host keys
Before=ssh.service
ConditionPathExists=!/etc/ssh/ssh_host_rsa_key

[Service]
Type=oneshot
ExecStart=/usr/bin/ssh-keygen -A

[Install]
WantedBy=multi-user.target
EOM
        nspawn systemctl enable ssh-regenerate-hostkeys.service
    fi

    if [ "${SKIP_LUDO}" -eq 0 ]; then
        cat <<'EOM' > "${R}/usr/lib/systemd/system/ludos-sshd-handler.service"
[Unit]
Description=Disable sshd if LudOS has it disabled
After=ssh.service
ConditionPathExists=!/storage/.cache/services/sshd.conf

[Service]
Type=oneshot
ExecStart=systemctl stop ssh

[Install]
WantedBy=multi-user.target
EOM
        nspawn systemctl enable ludos-sshd-handler.service

        cat <<'EOM' > "${R}/usr/lib/systemd/system/ludos-samba-handler.service"
[Unit]
Description=Disable nmbd and smbd if LudOS has them disabled
After=nmbd.service
After=smbd.service
ConditionPathExists=!/storage/.cache/services/samba.conf

[Service]
Type=oneshot
ExecStart=systemctl stop nmbd
ExecStart=systemctl stop smbd

[Install]
WantedBy=multi-user.target
EOM
        nspawn systemctl enable ludos-samba-handler.service

        cat <<'EOM' > "${R}/usr/lib/systemd/system/ludos-bluez-handler.service"
[Unit]
Description=Disable Bluetooth if LudOS has it disabled
After=bluetooth.target
ConditionPathExists=!/storage/.cache/services/bluez.conf

[Service]
Type=oneshot
ExecStart=systemctl stop bluetooth

[Install]
WantedBy=multi-user.target
EOM
        nspawn systemctl enable ludos-bluez-handler.service

        # Disable systemd-networkd et al; we're using connman
        # - https://www.naut.ca/blog/2018/12/12/disabling-systemd-networking/
        nspawn systemctl stop systemd-networkd.socket systemd-networkd networkd-dispatcher systemd-networkd-wait-online
        nspawn systemctl disable systemd-networkd.socket systemd-networkd networkd-dispatcher systemd-networkd-wait-online
        nspawn systemctl stop systemd-resolved
        nspawn systemctl disable systemd-resolved.service
        #rm ${R}/etc/dhcp/dhclient-enter-hooks.d/resolved

        cat <<'EOM' > "${R}/etc/ludo.toml"
video_fullscreen = true
cores_dir = "/usr/lib/ludo"
assets_dir = "/usr/share/ludo/assets"
database_dir = "/usr/share/ludo/database"
playlists_dir = "/storage/Retro/playlists"
savefiles_dir = "/storage/Retro/savefiles"
savestates_dir = "/storage/Retro/savestates"
screenshots_dir = "/storage/Retro/screenshots"
system_dir = "/storage/Retro/system"
thumbnail_dir = "/storage/Retro/thumbnails"
bluetooth_service = true
samba_service = true
ssh_service = true
EOM

        cat <<EOM > "${R}/etc/samba/smb.conf"
#
# Sample configuration file for the Samba suite for Retro Home.
#
#
# You should read the smb.conf(5) manual page in order to understand the
# options listed here. Whenever you modify this file you should run the command
# "testparm" to check that you have not made any basic syntactic errors.

[global]
  netbios name = retro-home-${REMIX}
  server string = Retro Home (${REMIX})
  workgroup = Retro Home
  browseable = yes
  writeable = yes
  printable = no
  deadtime = 30
  mangled names = no
  name resolve order = host bcast
  printcap name = /dev/null
  load printers = no
  encrypt passwords = true
  enable core files = no
  passdb backend = smbpasswd
  smb encrypt = disabled
  fruit:model = Xserve

  # samba share options
  map to guest = Bad User
  guest account = root
  security = user

  # samba tuning options
  socket options = TCP_NODELAY IPTOS_LOWDELAY SO_SNDBUF=65535 SO_RCVBUF=65535
  min receivefile size = 16384
  aio read size = 16384
  aio write size = 16384
  use sendfile = yes

  # The following are default values for the master selection process
  # local master = yes
  # preferred master = auto
  # domain master = auto
  # os level = 20

  # "strict allocate = yes" breaks large network transfers to external hdd
  # Force this to "no" in case "yes" becomes the default in future
  strict allocate = no

  allocation roundup size = 0

# Using the following configurations as a template allows you to add
# writeable shares of disks and paths under /storage

[Update]
  path = /storage/.update
  available = yes
  browseable = yes
  public = yes
  writeable = yes
  create mask = 0644
  force create mode = 0644
  force directory mode = 0755
  force user = ludo
  force group = ludo
  root preexec = mkdir -p /storage/.update

[ROMs]
  path = /storage/Retro/roms
  available = yes
  browseable = yes
  public = yes
  writeable = yes
  create mask = 0644
  force create mode = 0644
  force directory mode = 0755
  force user = ludo
  force group = ludo
  root preexec = mkdir -p /storage/Retro/roms

[Savestates]
  path = /storage/Retro/savestates
  available = yes
  browseable = yes
  public = yes
  writeable = yes
  create mask = 0644
  force create mode = 0644
  force directory mode = 0755
  force user = ludo
  force group = ludo
  root preexec = mkdir -p /storage/Retro/savestates

[Savefiles]
  path = /storage/Retro/savefiles
  available = yes
  browseable = yes
  public = yes
  writeable = yes
  create mask = 0644
  force create mode = 0644
  force directory mode = 0755
  force user = ludo
  force group = ludo
  root preexec = mkdir -p /storage/Retro/savefiles

[Screenshots]
  path = /storage/Retro/screenshots
  available = yes
  browseable = yes
  public = yes
  writeable = yes
  create mask = 0644
  force create mode = 0644
  force directory mode = 0755
  force user = ludo
  force group = ludo
  root preexec = mkdir -p /storage/Retro/screenshots

[System]
  path = /storage/Retro/system
  available = yes
  browseable = yes
  public = yes
  writeable = yes
  create mask = 0644
  force create mode = 0644
  force directory mode = 0755
  force user = ludo
  force group = ludo
  root preexec = mkdir -p /storage/Retro/system

[Playlists]
  path = /storage/Retro/playlists
  available = yes
  browseable = yes
  public = yes
  writeable = yes
  create mask = 0644
  force create mode = 0644
  force directory mode = 0755
  force user = ludo
  force group = ludo
  root preexec = mkdir -p /storage/Retro/playlists

[Thumbnails]
  path = /storage/Retro/thumbnails
  available = yes
  browseable = yes
  public = yes
  writeable = yes
  create mask = 0644
  force create mode = 0644
  force directory mode = 0755
  force user = ludo
  force group = ludo
  root preexec = mkdir -p /storage/Retro/thumbnails
EOM

        # Create directozries Ludo requires
        for DOT_DIR in .cache/connman .cache/services .config/ludo .local/ludo .local/share/ludo .ludo .update; do
            mkdir -p "${R}/storage/${DOT_DIR}"
        done

        for CONF_FILE in .cache/services/bluez.conf .cache/services/samba.conf .cache/services/sshd.conf .local/share/ludo/history.csv; do
            touch "${R}/storage/${CONF_FILE}"
        done

        for LUDO_DIR in playlists roms savefiles savestates screenshots system thumbnails; do
            mkdir -p "${R}/storage/Retro/${LUDO_DIR}"
        done

        chown -Rv 1000:1000 "${R}/storage"

        echo "ludo   ALL=(ALL:ALL) NOPASSWD:SETENV: /usr/bin/ludo" > "${R}/etc/sudoers.d/090-ludo"
        chmod -v 0440 "${R}/etc/sudoers.d/090-ludo"
        # PolicyKit object
        #org.freedesktop.systemd1.manage-units

        # Generate retro-home icons
        wget -qc "https://raw.githubusercontent.com/wimpysworld/retro-home/master/.github/logo.svg" -O "${R_STAGE_0}/retro-home.svg"
        cp "${R_STAGE_0}/retro-home.svg" "${R}/usr/share/icons/hicolor/scalable/apps/retro-home.svg"
        for SIZE in 1024 512 256 192 128 96 72 64 48 36 32 24 22 16; do
            mkdir -p "${R}/usr/share/icons/hicolor/${SIZE}x${SIZE}/apps"
            convert -density 1200 -resize ${SIZE}x${SIZE} -background none "${R_STAGE_0}/retro-home.svg" "${R}/usr/share/icons/hicolor/${SIZE}x${SIZE}/apps/retro-home.png"
        done

        # Generate ludo icons
        for SIZE in 512 256 192 128 96 72 64 48 36 32 24 22 16; do
            convert -resize ${SIZE}x${SIZE} -background none "${R}/usr/share/icons/hicolor/1024x1024/apps/ludo.png" "${R}/usr/share/icons/hicolor/${SIZE}x${SIZE}/apps/ludo.png"
        done
        nspawn gtk-update-icon-cache /usr/share/icons/hicolor/

        # Make an Ludo icon for Slick Greeter
        convert -resize 80x80 -background none "${R}/usr/share/icons/hicolor/1024x1024/apps/ludo.png" "${R}/usr/share/pixmaps/ludo.png"

        # Generate ubuntu-mono-yaru icon theme
        cp -a "${R}/usr/share/icons/ubuntu-mono-light" "${R}/usr/share/icons/ubuntu-mono-yaru"
        sed -i s'|Ubuntu-Mono-Light|Ubuntu-Mono-Yaru|' "${R}/usr/share/icons/ubuntu-mono-yaru/index.theme"
        sed -i s'|Inherits=Humanity|Inherits=Yaru,Humanity|' "${R}/usr/share/icons/ubuntu-mono-yaru/index.theme"
        nspawn gtk-update-icon-cache /usr/share/icons/ubuntu-mono-yaru/

        # Composite the Retro Home wallpaper
        wget -c "https://linuxconfig.org/wp-content/uploads/2020/03/Focal-Fossa_Plain_WP_1920x1080_GREY.png" -O "${R_STAGE_0}/Yaru-Grey.png"
        composite -gravity center "${R}/usr/share/icons/hicolor/256x256/apps/retro-home.png" "${R_STAGE_0}/Yaru-Grey.png" "${R_STAGE_0}/Retro-Home-Wallpaper.png"
        # Add the Retro Home wallpaper
        mkdir -p "${R}/usr/share/backgrounds/" 2>/dev/null
        cp -a "${R_STAGE_0}/Retro-Home-Wallpaper.png" "${R}/usr/share/backgrounds/"

        # Create Retro Home xsession
        cat <<'EOM' > "${R}/usr/local/bin/retro-home"
#!/usr/bin/env bash
export __GL_YIELD=USLEEP
export SDL_MOUSE_RELATIVE=0
export DISPLAY=:0.0
export WAYLAND_DISPLAY=wayland-0

# Disable screen blanking, DPMS and screensaver
xset -dpms
xset s noblank
xset s off

if [ "$(id -u)" -eq 0 ]; then
    xsetroot -solid rgb:67/67/67
    feh --bg-scale /usr/share/backgrounds/Retro-Home-Wallpaper.png
    /usr/bin/ludo -ludos
    chown -R ludo:ludo /storage/{.cache,.config,.local}
else
    /usr/bin/ludo -ludos
fi
EOM
        chmod 755 "${R}/usr/local/bin/retro-home"

        mkdir -p "${R}/usr/share/xsessions"
        cp -a "${R}/usr/share/applications/ludo.desktop" "${R}/usr/share/xsessions/retro-home.desktop"
        sed -i s'|Icon=ludo|Icon=retro-home|' "${R}/usr/share/xsessions/retro-home.desktop"
        sed -i 's|Exec=ludo|Exec=retro-home|' "${R}/usr/share/xsessions/retro-home.desktop"
        sed -i 's|Name=Ludo|Name=Retro Home|' "${R}/usr/share/xsessions/retro-home.desktop"

        # Enable auto-login to run Retro Home
        cat <<'EOM' > "${R}/etc/lightdm/lightdm.conf"
[SeatDefaults]
autologin-user=root
autologin-user-timeout=0
autologin-session=retro-home
EOM

        # Create gschema override
        cat <<'EOM' > "${R}/usr/share/glib-2.0/schemas/90_retro-home.gschema.override"
[x.dm.slick-greeter]
background='/usr/share/backgrounds/Retro-Home-Wallpaper.png'
background-color='#676767'
draw-grid=true
draw-user-backgrounds=false
enable-hidpi='auto'
font-name='M+ 1p Medium 11'
icon-theme-name='ubuntu-mono-yaru'
high-contrast=false
show-hostname=true
logo='/usr/share/pixmaps/ludo.png'
onscreen-keyboard=false
#other-monitors-logo=''
play-ready-sound='/usr/share/sounds/Yaru/stereo/system-ready.oga'
screen-reader=false
show-power=true
show-a11y=false
show-keyboard=true
show-clock=true
show-quit=true
theme-name='Yaru'
xft-antialias=true
xft-dpi=96
xft-hintstyle='hintslight'
xft-rgba='rgb'

[org.gnome.desktop.background:GNOME-Flashback]
color-shading-type='vertical'
picture-uri='file:///usr/share/backgrounds/Retro-Home-Wallpaper.png'
primary-color='#676767'
secondary-color='#676767'

[org.gnome.desktop.datetime:GNOME-Flashback]
automatic-timezone=true

[org.gnome.desktop.interface:GNOME-Flashback]
cursor-theme='Yaru'
document-font-name='M+ 1p Medium 11'
enable-hot-corners=false
font-name='M+ 1p Medium 11'
gtk-theme='Yaru'
icon-theme='ubuntu-mono-yaru'
monospace-font-name='M+ 1mn Medium 14'

[org.gnome.desktop.lockdown:GNOME-Flashback]
disable-printing=true
disable-print-setup=true
disable-user-switching=true

[org.gnome.desktop.media-handling:GNOME-Flashback]
automount-open=false

[org.gnome.desktop.privacy:GNOME-Flashback]
remember-app-usage=false
remember-recent-files=false
report-technical-problems=false
send-software-usage-stats=false

[org.gnome.desktop.screensaver:GNOME-Flashback]
color-shading-type='vertical'
lock-enabled=false
picture-uri='file:///usr/share/backgrounds/Retro-Home-Wallpaper.png'
primary-color='#676767'
secondary-color='#676767'
ubuntu-lock-on-suspend=false
user-switch-enabled=false

[org.gnome.desktop.session:GNOME-Flashback]
idle-delay=0

[org.gnome.desktop.sound:GNOME-Flashback]
theme-name='Yaru'

[org.gnome.desktop.wm.preferences:GNOME-Flashback]
button-layout=':minimize,maximize,close'
theme='Yaru'
titlebar-font='M+ 1p Bold 11'
titlebar-uses-system-font=false

[org.gnome.gedit.preferences.editor]
editor-font='M+ 1mn Medium 14'

[org.gnome.gnome-flashback.desktop.background:GNOME-Flashback]
fade=false

[org.gnome.gnome-flashback.desktop.icons:GNOME-Flashback]
show-home=false
show-trash=false

[org.gnome.metacity:GNOME-Flashback]
alt-tab-thumbnails=true

[org.gnome.metacity.theme:GNOME-Flashback]
name='Yaru'

[org.gnome.settings-deamon.plugins.power:GNOME-Flashback]
idle-dim=false
power-button-action='interactive'
sleep-inactive-ac-timeout=0
sleep-inactive-ac-type='nothing'
sleep-inactive-battery-timeout=0
sleep-inactive-battery-type='nothing'
EOM

        nspawn glib-compile-schemas /usr/share/glib-2.0/schemas/
    fi

    # Disable tracker
    rm "${R}/etc/systemd/user/default.target.wants/tracker-extract-3.service"
    rm "${R}/etc/systemd/user/gnome-session.target.wants/tracker-extract-3.service"
    rm "${R}/etc/systemd/user/gnome-session.target.wants/tracker-miner-fs-3.service"

    cat <<'EOM' > "${R}/usr/share/applications/connman-gtk-flashback.desktop"
[Desktop Entry]
Type=Application
Exec=connman-gtk
Name=Connman Settings
Categories=GTK;Utility;System;
Keywords=connman;network;settings;wired;wifi;wi-fi;bluetooth;vpn;tethering
X-GNOME-Settings-Panel=connman-gtk
X-Unity-Settings-Panel=connman-gtk
Icon=preferences-system-network
EOM
}

function stage_06_clean() {
    export B="${B_STAGE_6}"
    export R="${R_STAGE_6}"
    sync_from "${B_STAGE_5}" "${R_STAGE_5}"

    nspawn apt-get -y autoremove
    nspawn apt-get -y autoclean
    nspawn apt-get -y clean

    rm -f "${B}"/{*.bak,*.old}
    rm -f "${R}"/boot/{*.bak,*.old}
    rm -f "${R}"/etc/ssh/ssh_host_*_key*
    rm -f "${R}"/etc/apt/*.save
    rm -f "${R}"/etc/apt/apt.conf.d/90cache
    rm -f "${R}"/etc/apt/sources.list.d/*.save
    rm -f "${R}"/var/log/apt/*
    rm -f "${R}"/var/log/alternatives.log
    rm -f "${R}"/var/log/dpkg.log
    rm -f "${R}"/var/log/fontconfig.log
    rm -rf "${R}"/tmp/*
    rm -f "${R}"/var/crash/*
    rm -f "${R}"/var/cache/apt/*
    rm -rf "${R}"/var/cache/apt/archives/*
    rm -f "${R}"/var/cache/debconf/*-old
    rm -rf "${R}"/var/lib/apt/lists/*
    rm -f "${R}"/var/lib/dpkg/*-old
    [ -L "${R}"/var/lib/dbus/machine-id ] || rm -f "${R}"/var/lib/dbus/machine-id
    echo '' > "${R}"/etc/machine-id

    # Only required if Connman has been made the default network renderer
    cd "${R}/etc"
    ln -sf ../run/connman/resolv.conf resolv.conf
    cd -
}

function stage_07_image() {
    export B="${B_STAGE_6}"
    export R="${R_STAGE_6}"

    # Build the image file
    local SIZE_IMG=""
    SIZE_IMG=$(du -csh "${R}" | tail -n1 | cut -d'.' -f1)
    ((SIZE_IMG+=2))
    local SIZE_BOOT="256MiB"

    # Remove old images.
    rm -fv "${TMP_DIR}/${IMG_OUT}"

    # Create an empty file file.
    dd if=/dev/zero of="${TMP_DIR}/${IMG_OUT}" bs=1MB count=1
    dd if=/dev/zero of="${TMP_DIR}/${IMG_OUT}" bs=1MB count=0 seek=$(( SIZE_IMG * 1000 ))

    # Initialising: msdos
    parted -s "${TMP_DIR}/${IMG_OUT}" mktable msdos
    echo "Creating /boot/firmware partition"
    parted -a optimal -s "${TMP_DIR}/${IMG_OUT}" mkpart primary fat32 1 "${SIZE_BOOT}"
    echo "Creating / partition"
    parted -a optimal -s "${TMP_DIR}/${IMG_OUT}" mkpart primary ext4 "${SIZE_BOOT}" 100%
    echo "Making partition 1 bootable"
    parted -s "${TMP_DIR}/${IMG_OUT}" set 1 boot on

    PARTED_OUT=$(parted -s "${TMP_DIR}/${IMG_OUT}" unit b print)
    BOOT_OFFSET=$(echo "${PARTED_OUT}" | grep -e '^ 1'| xargs echo -n \
    | cut -d" " -f 2 | tr -d B)
    BOOT_LENGTH=$(echo "${PARTED_OUT}" | grep -e '^ 1'| xargs echo -n \
    | cut -d" " -f 4 | tr -d B)

    ROOT_OFFSET=$(echo "${PARTED_OUT}" | grep -e '^ 2'| xargs echo -n \
    | cut -d" " -f 2 | tr -d B)
    ROOT_LENGTH=$(echo "${PARTED_OUT}" | grep -e '^ 2'| xargs echo -n \
    | cut -d" " -f 4 | tr -d B)

    BOOT_LOOP=$(losetup --show -f -o "${BOOT_OFFSET}" --sizelimit "${BOOT_LENGTH}" "${TMP_DIR}/${IMG_OUT}")
    ROOT_LOOP=$(losetup --show -f -o "${ROOT_OFFSET}" --sizelimit "${ROOT_LENGTH}" "${TMP_DIR}/${IMG_OUT}")
    echo "/boot/firmware: offset ${BOOT_OFFSET}, length ${BOOT_LENGTH}"
    echo "/:              offset ${ROOT_OFFSET}, length ${ROOT_LENGTH}"

    mkfs.vfat -n system-boot -S 512 -s 16 -v "${BOOT_LOOP}"
    mkfs.ext4 -L writable -m 0 "${ROOT_LOOP}"

    MOUNTDIR="${TMP_DIR}/image"
    mkdir -p "${MOUNTDIR}"
    mount -v "${ROOT_LOOP}" "${MOUNTDIR}" -t ext4
    mkdir -p "${MOUNTDIR}/boot/firmware"
    mount -v "${BOOT_LOOP}" "${MOUNTDIR}/boot/firmware" -t vfat
    echo "Syncing root..."
    rsync -aHAXx --delete "${R}"/ "${MOUNTDIR}/"
    echo "Syncing boot..."
    rsync -aHAXx --delete "${B}"/ "${MOUNTDIR}/boot/firmware/"
    mkdir -p "${MOUNTDIR}/.disk"
    date +"%Y%m%d" > "${MOUNTDIR}/.disk/info"
    sync
    umount -l "${MOUNTDIR}/boot/firmware"
    umount -l "${MOUNTDIR}"
    losetup -d "${ROOT_LOOP}"
    losetup -d "${BOOT_LOOP}"
    ls -lh "${TMP_DIR}/${IMG_OUT}"
    rm -rf "${MOUNTDIR}"
}

function stage_08_compress_and_hash() {
    export B="${B_STAGE_6}"
    export R="${R_STAGE_6}"

    # NOTE! Disabled while iterating
    echo "Compressing ${IMG_OUT}.xz"
    rm "${TMP_DIR}/${IMG_OUT}.xz" 2>/dev/null
    xz --keep -T 0 "${TMP_DIR}/${IMG_OUT}"
    ls -lh "${TMP_DIR}/${IMG_OUT}.xz"

    local HASH="sha256"
    local OUT_HASH="${TMP_DIR}/${IMG_OUT}.xz.${HASH}"

    rm -f "${OUT_HASH}"

    if [ -e "${TMP_DIR}/${IMG_OUT}.xz" ]; then
        echo "Hashing ${IMG_OUT}.xz"
        ${HASH}sum "${TMP_DIR}/${IMG_OUT}.xz" > "${OUT_HASH}"
        sed -i -r "s/ .*\/(.+)/  \1/g" "${OUT_HASH}"
    else
        echo "WARNING! Didn't find ${TMP_DIR}/${IMG_OUT} to hash."
    fi
}

if [ "$(id -u)" -ne 0 ]; then
    echo "ERROR! Root permissions required."
    exit 1
fi

# Take command line arguments
if [ $# -lt 1 ]; then
    usage
    exit 0
else
    while [ $# -gt 0 ]; do
        case "${1}" in
            -device|--device)
                REMIX="${2}"
                shift
                shift;;
            *)
                echo "[!] ERROR: \"${1}\" is not a supported parameter."
                usage
                exit 1;;
        esac
    done
fi

SKIP_LUDO=0
SKIP_DESKTOP=0
SKIP_UBUNTU_STANDARD=0

# Set variables based on chosen desktop environment
case "${REMIX}" in
    raspi)
        echo "[+] Specified Rasberry Pi 2, 3, 4 or 400"
        shift;;
    gamehat)
        SKIP_DESKTOP=1
        echo "[+] Specified Waveshare Game HAT"
        not_implemented
        shift;;
    gamepi20)
        SKIP_DESKTOP=1
        echo "[+] Specified Waveshare GamePi20"
        not_implemented
        shift;;
    gamepi43)
        SKIP_DESKTOP=1
        echo "[+] Specified Waveshare GamePi43"
        not_implemented
        shift;;
    gpi)
        SKIP_DESKTOP=1
        echo "[+] Specified RetroFlag GPi Case"
        echo "[!] The RetroFlag GPi Case is only supported with:"
        echo "      - Raspberry Pi Zero 2 W"
        not_implemented
        shift;;
    gpimate)
        # https://retrogamerestore.com/store/gpimate/
        SKIP_DESKTOP=1
        echo "[+] Specified RetroFlag GPi Case with GPiMate for CM3+Lite"
        not_implemented
        shift;;
    gpimateplus)
        SKIP_DESKTOP=1
        # https://retrogamerestore.com/store/gpimateplus/
        # https://github.com/martinx72/GPiMatePlusHowTo
        echo "[+] Specified RetroFlag GPi Case with GPiMate Plus for CM4 Lite"
        not_implemented
        shift;;
    gpm280)
        SKIP_DESKTOP=1
        echo "[+] Specified Waveshare GPM280"
        not_implemented
        shift;;
    megapi)
        echo "[+] Specified RetroFlag MEGAPi Case"
        not_implemented
        shift;;
    minin64)
        # https://megabitnes.com/store/n64-pi4/
        echo "[+] Specified Megabit Mini N64"
        not_implemented
        shift;;
    minips1)
        # https://megabitnes.com/store/mini-ps1-case-non-nfc/
        # https://megabitnes.com/non-nfc/
        echo "[+] Specified Megabit Mini PS1 (Non-NFC)"
        not_implemented
        shift;;
    monster)
        echo "[+] Specified Monster Arcade Controller Kit"
        not_implemented
        shift;;
    nespi)
        echo "[+] Specified RetroFlag NESPi Case+"
        not_implemented
        shift;;
    picade)
        echo "[+] Specified Pimoroni Picade"
        not_implemented
        shift;;
    picadeconsole)
        echo "[+] Specified Pimoroni Picade Console"
        not_implemented
        shift;;
    superpi)
        echo "[+] Specified RetroFlag SUPERPi Case"
        not_implemented
        shift;;
    *)
        if [ -z "${REMIX}" ]; then
        echo "[!] ERROR: Please specifiy a target device"
        else
        echo "[!] ERROR: ${REMIX} is not a valid target device"
        fi
        usage
        exit 1;;
esac

# Install apt-cacher-ng on the host and this script will use it.
APT_CACHE_IP=$(ip route get 1.1.1.1 | head -n 1 | cut -d' ' -f 7)
IMG_QUALITY="-alpha3"
IMG_VER="21.10"
IMG_RELEASE="impish"
IMG_ARCH="armhf"
IMG_OUT="retro-home-${REMIX}-${IMG_VER}${IMG_QUALITY}-${IMG_ARCH}.img"
TMP_DIR=$(pwd)

# Create caches
for LOOP in 0 1 2 3 4 5 6 7 8 9; do
    case ${LOOP} in
      0)
        export R_STAGE_${LOOP}="${TMP_DIR}/${IMG_ARCH}/retro-home-${REMIX}/${IMG_VER}/${LOOP}_cache"
        mkdir -p "${TMP_DIR}/${IMG_ARCH}/retro-home-${REMIX}/${IMG_VER}/${LOOP}_cache" 2>/dev/null
        ;;
      *)
        export B_STAGE_${LOOP}="${TMP_DIR}/${IMG_ARCH}/retro-home-${REMIX}/${IMG_VER}/${LOOP}_boot"
        export R_STAGE_${LOOP}="${TMP_DIR}/${IMG_ARCH}/retro-home-${REMIX}/${IMG_VER}/${LOOP}_root"
        mkdir -p "${TMP_DIR}/${IMG_ARCH}/retro-home-${REMIX}/${IMG_VER}/${LOOP}_boot" 2>/dev/null
        mkdir -p "${TMP_DIR}/${IMG_ARCH}/retro-home-${REMIX}/${IMG_VER}/${LOOP}_root/boot/firmware" 2>/dev/null
        ;;
    esac
done

stage_01_bootstrap
stage_02_ludo
stage_03_micro_desktop
stage_04_kernel
stage_05_config
stage_06_clean
stage_07_image
#stage_08_compress_and_hash
